name: CI
env:
  DEBUG: napi:*
  APP_NAME: tokenizers
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: read
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  workflow_dispatch: {}
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
              # Ensure the file is renamed consistently for universal binary creation
              cp *.node tokenizers.darwin-x64.node || true
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              apt-get update -y &&
              apt-get install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross gcc-aarch64-linux-gnu &&
              cp /usr/aarch64-linux-gnu/include/features.h /usr/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot/usr/include/ || true &&
              rustup target add aarch64-unknown-linux-gnu &&
              yarn build --target aarch64-unknown-linux-gnu &&
              aarch64-linux-gnu-strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              yarn build --target aarch64-apple-darwin
              strip -x *.node
              # Ensure the file is renamed consistently for universal binary creation
              cp *.node tokenizers.darwin-arm64.node || true
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          architecture: x86
      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing src directory:"
          ls -la src/
          echo "Listing src/tasks directory (if exists):"
          ls -la src/tasks/ || echo "src/tasks directory doesn't exist"
          echo "File contents of src/lib.rs:"
          cat src/lib.rs
        shell: bash
      - name: Ensure tasks directory exists
        run: |
          mkdir -p src/tasks
          echo "// Module initialization file for tasks" > src/tasks/mod.rs
          echo "pub mod models;" >> src/tasks/mod.rs
          echo "pub mod tokenizer;" >> src/tasks/mod.rs
          echo "Listing src/tasks directory after creation:"
          ls -la src/tasks/
        shell: bash
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ${{ env.APP_NAME }}.*.node
            tokenizers.darwin-x64.node
            tokenizers.darwin-arm64.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - "16"
          - "18"
          - "20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "16"
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on Linux-aarch64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "16"
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Test bindings
        run: docker run --rm --platform linux/arm64 -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: .
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: .
      - name: Debug artifacts
        run: |
          echo "Current directory content:"
          ls -la
          echo "Looking for .node files:"
          find . -name "*.node" -type f
        shell: bash
      - name: Prepare for universal build
        run: |
          # More extensive search for the binary files
          echo "Searching with different patterns to find all possible matches:"
          echo "All .node files:"
          find . -name "*.node" -type f
          
          # Try multiple patterns to find the x64 file
          x64_file=$(find . -name "tokenizers.darwin-x64.node" -o -name "*x86_64*.node" -o -name "*.darwin.node" | grep -v "arm\|aarch" | head -n 1)
          arm64_file=$(find . -name "tokenizers.darwin-arm64.node" -o -name "*aarch64*.node" -o -name "*arm64*.node" | head -n 1)
          
          echo "Found x64 file: $x64_file"
          echo "Found arm64 file: $arm64_file"
          
          # If x64 file is still not found, try a more general approach
          if [ -z "$x64_file" ]; then
            echo "Trying alternative approach to find x64 file..."
            # List all .node files and grep for one that's not arm64/aarch64
            x64_file=$(find . -name "*.node" -type f | grep -v "arm64\|aarch64" | head -n 1)
            echo "Alternative search found x64 file: $x64_file"
          fi
          
          if [ -n "$x64_file" ] && [ -n "$arm64_file" ]; then
            # Directly verify files exist without copying them if they already have the expected names
            if [[ "$x64_file" != "./tokenizers.darwin-x64.node" ]]; then
              cp "$x64_file" "./tokenizers.darwin-x64.node"
              echo "Copied x64 file to required name"
            else
              echo "x64 file already has the correct name"
            fi
            
            if [[ "$arm64_file" != "./tokenizers.darwin-arm64.node" ]]; then
              cp "$arm64_file" "./tokenizers.darwin-arm64.node"
              echo "Copied arm64 file to required name"
            else
              echo "arm64 file already has the correct name"
            fi
            
            echo "Files for universal build:"
            ls -la ./tokenizers.darwin-x64.node ./tokenizers.darwin-arm64.node
          else
            echo "Error: Could not find required binary files"
            echo "x64_file: $x64_file"
            echo "arm64_file: $arm64_file"
            exit 1
          fi
        shell: bash
      - name: Combine binaries
        run: |
          echo "Verifying files before universal build:"
          ls -la *.node
          echo "Running yarn universal command:"
          yarn universal
          echo "After universal build:"
          ls -la *.node
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-aarch64-gnu-binding
      - universal-macOS
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
